<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Заметки о фронтенде</title>
  <subtitle>Блог Виталия Зюзина</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://juwain.ru/"/>
  <updated>2016-05-27T11:15:05.000Z</updated>
  <id>http://juwain.ru/</id>
  
  <author>
    <name>Виталий Зюзин</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Инспекция и причёсывание CSS</title>
    <link href="http://juwain.ru/2016/05/15/linting-css/"/>
    <id>http://juwain.ru/2016/05/15/linting-css/</id>
    <published>2016-05-15T16:12:29.000Z</published>
    <updated>2016-05-27T11:15:05.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Предыстория&quot;&gt;&lt;a href=&quot;#Предыстория&quot; class=&quot;headerlink&quot; title=&quot;Предыстория&quot;&gt;&lt;/a&gt;Предыстория&lt;/h3&gt;&lt;p&gt;Однажды мы &lt;a href=&quot;https://htmlacademy.ru/blog/62-codeguide-why-what-and-how&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;решили&lt;/a&gt; сделать в Академии &lt;a href=&quot;https://htmlacademy.github.io/codeguide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;кодгайд&lt;/a&gt;. Кодгайд нам стал нужен для контроля над собственным кодом HTML/CSS и кодом учебных проектов студентов, которые у нас проходят интенсивный курс.&lt;/p&gt;
&lt;p&gt;Сам по себе кодгайд — хорошая, но нестрогая штука. Команда ознакомилась с ним и взяла на вооружение: загрузили правила кодгайда в мозг, собственный и ученический код стали проверять методом «пристального взгляда».&lt;/p&gt;
&lt;p&gt;У такого подхода есть очевидный минус — человеческий фактор. Можно запросто забыть или упустить что-то из правил. Чтобы контролировать собственный CSS-код, мы сделали конфигурацию для &lt;a href=&quot;http://csscomb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSComb&lt;/a&gt; и как-то справлялись автоматическим «причёсыванием» кода. Это конечно хорошо для производительности: написал CSS, запустил «расчёску», а она тебе сама поправит все недочёты и ошибки. Но совсем не подходит для целей обучения студентов или новичков в команде: человек будет полагаться на автоматическое «причёсывание», вместо того, чтобы самому научиться писать красивый единообразный код.&lt;/p&gt;
&lt;p&gt;Поэтому я задумался об автоматизированной инспекции кода.&lt;/p&gt;
&lt;h3 id=&quot;Линтинг&quot;&gt;&lt;a href=&quot;#Линтинг&quot; class=&quot;headerlink&quot; title=&quot;Линтинг&quot;&gt;&lt;/a&gt;Линтинг&lt;/h3&gt;&lt;p&gt;Решений для инспекции CSS на самом деле оказалось не так много. Да и захотелось ещё проверять не только CSS, но и PostCSS, на котором у нас написан новый фронтенд.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/CSSLint/csslint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSLint&lt;/a&gt; немного устарел (последний релиз 15 августа 2013), и в нём не так много возможностей для тонкой конфигурации.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/brigade/scss-lint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SCSS-Lint&lt;/a&gt; подходит только для SCSS, кроме того требует Ruby, что более проблематично, чем Node.js (который уже есть в проектах).&lt;/p&gt;
&lt;p&gt;А вот &lt;a href=&quot;https://github.com/stylelint/stylelint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stylelint&lt;/a&gt; отлично себя зарекомендовал:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;большие возможности тонкой настройки «из коробки»;&lt;/li&gt;
&lt;li&gt;возможность кастомизации;&lt;/li&gt;
&lt;li&gt;работает с PostCSS и поддерживаемыми им препроцессорными синтаксисами (CSS, SCSS, LESS…).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stylelint можно запускать из консоли, из Node.js, из таск-раннера или прямо в редакторе. Я сейчас использую его преимущественно из &lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Атома&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Всё, что Stylelint умеет проверять «из коробки», можно условно разделить на группы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;проверка форматирования кода;&lt;/li&gt;
&lt;li&gt;«цензура» кода;&lt;/li&gt;
&lt;li&gt;нахождение и предотвращение ошибок.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Всего на момент написания статьи конфигурация Stylelint содержит около 150 правил. Все правила досконально описывать в этой статье не имеет смысла, так как они подробно разобраны в &lt;a href=&quot;http://stylelint.io/user-guide/rules/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;документации&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;Проверка-форматирования-кода&quot;&gt;&lt;a href=&quot;#Проверка-форматирования-кода&quot; class=&quot;headerlink&quot; title=&quot;Проверка форматирования кода&quot;&gt;&lt;/a&gt;Проверка форматирования кода&lt;/h4&gt;&lt;p&gt;Основное, что я жду от линтера — проверка соответствия кодгайду. То есть отступы, табуляция, единицы измерения, отбивка — вот это всё. Вот, к примеру, условно «правильный» код:&lt;/p&gt;
&lt;img src=&quot;/2016/05/15/linting-css/valid-code.jpg&quot; alt=&quot;Пример «правильного» кода&quot; title=&quot;Пример «правильного» кода&quot;&gt;
&lt;p&gt;Отступление от описанного в конфиге форматирования сигнализирует об ошибке. Проверяется много чего:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;написание цветов (&lt;code&gt;color-hex-case&lt;/code&gt;, &lt;code&gt;color-hex-length&lt;/code&gt;, &lt;code&gt;color-named&lt;/code&gt;, &lt;code&gt;color-no-hex&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;написание шрифтов (&lt;code&gt;font-family-name-quotes&lt;/code&gt;, &lt;code&gt;font-weight-notation&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;пробелы и табуляция (тут очень много правил: пробелы можно проверять до и после практически любых конструкций в CSS);&lt;/li&gt;
&lt;li&gt;кавычки (&lt;code&gt;function-url-quotes&lt;/code&gt;, &lt;code&gt;string-quotes&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;переносы в CSS-правилах и списках правил (тут тоже много правил относительно разных конструкций CSS);&lt;/li&gt;
&lt;li&gt;регистр букв в селекторах, свойствах и значениях (&lt;code&gt;unit-case&lt;/code&gt;, &lt;code&gt;value-keyword-case&lt;/code&gt;,&lt;code&gt;property-case&lt;/code&gt; и другие);&lt;/li&gt;
&lt;li&gt;двоеточия (&lt;code&gt;selector-pseudo-element-colon-notation&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;и ещё много других моментов.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Пример ошибок в коде:&lt;/p&gt;
&lt;img src=&quot;/2016/05/15/linting-css/invalid-code.jpg&quot; alt=&quot;Пример кода с неправильным форматированием&quot; title=&quot;Пример кода с неправильным форматированием&quot;&gt;
&lt;p&gt;Замечу, что Stylelint развивается быстрыми темпами, и за время написания статьи в него добавили ещё с десяток новых классных правил. Так что проверка соответствия стайлгайду — довольно детальная.&lt;/p&gt;
&lt;h4 id=&quot;«Цензура»-кода&quot;&gt;&lt;a href=&quot;#«Цензура»-кода&quot; class=&quot;headerlink&quot; title=&quot;«Цензура» кода&quot;&gt;&lt;/a&gt;«Цензура» кода&lt;/h4&gt;&lt;p&gt;Кроме базовой проверки стиля кода, Stylelint можно использовать для тотальной «цензуры». Есть возможность вполне безобидного запрета &lt;code&gt;!important&lt;/code&gt; (&lt;code&gt;declaration-no-important&lt;/code&gt;), стилизации по &lt;code&gt;#id&lt;/code&gt; или имени тега (&lt;code&gt;selector-no-attribute&lt;/code&gt;, &lt;code&gt;selector-no-id&lt;/code&gt;). А можно ввести &lt;del&gt;танки&lt;/del&gt; списки запрещённых или наоборот только разрешённых свойств (&lt;code&gt;property-blacklist&lt;/code&gt;, &lt;code&gt;property-whitelist&lt;/code&gt;), значений (&lt;code&gt;property-value-blacklist&lt;/code&gt;, &lt;code&gt;property-value-whitelist&lt;/code&gt;), CSS-функций (&lt;code&gt;function-blacklist&lt;/code&gt;, &lt;code&gt;function-whitelist&lt;/code&gt;), единиц измерения и даже содержимого комментариев.&lt;/p&gt;
&lt;p&gt;Эта возможность хорошо подходит для формирования набора правил, по которым будет обучаться новичок. Например, в интенсивных курсах HTML Academy по вёрстке для начинающих мы запрещаем пользоваться &lt;code&gt;!important&lt;/code&gt; и расставлять вендорные префиксы вручную:&lt;/p&gt;
&lt;img src=&quot;/2016/05/15/linting-css/no-important.jpg&quot; alt=&quot;Пример кода с использованием !important&quot; title=&quot;Пример кода с использованием !important&quot;&gt;
&lt;img src=&quot;/2016/05/15/linting-css/no-prefix.jpg&quot; alt=&quot;Пример кода с вендорными префиксами&quot; title=&quot;Пример кода с вендорными префиксами&quot;&gt;
&lt;p&gt;Проверку кода можно проводить перед пушем в учебный репозиторий.&lt;/p&gt;
&lt;h4 id=&quot;Нахождение-и-предотвращение-ошибок&quot;&gt;&lt;a href=&quot;#Нахождение-и-предотвращение-ошибок&quot; class=&quot;headerlink&quot; title=&quot;Нахождение и предотвращение ошибок&quot;&gt;&lt;/a&gt;Нахождение и предотвращение ошибок&lt;/h4&gt;&lt;p&gt;Ну хорошо. Если всё вышеизложенное можно отнести к стилю кода, то возможности Stylelint по нахождению ошибок и потенциально «опасных» мест в ваших стилях — приятный бонус линтера.&lt;/p&gt;
&lt;p&gt;Опишу несколько правил Stylelint, которые находят и предотвращают ошибки.&lt;/p&gt;
&lt;p&gt;Правило &lt;code&gt;color-no-invalid-hex&lt;/code&gt; находит недопустимые символы в шестнадцатеричном представлении цвета:&lt;/p&gt;
&lt;img src=&quot;/2016/05/15/linting-css/invalid-hex.jpg&quot; alt=&quot;Пример кода с неправильным значением цвета&quot; title=&quot;Пример кода с неправильным значением цвета&quot;&gt;
&lt;p&gt;Правило &lt;code&gt;no-duplicate-selectors&lt;/code&gt; найдёт одинаковые селекторы:&lt;/p&gt;
&lt;img src=&quot;/2016/05/15/linting-css/no-duplicates.jpg&quot; alt=&quot;Пример кода с дубликатом селектора&quot; title=&quot;Пример кода с дубликатом селектора&quot;&gt;
&lt;p&gt;Правило &lt;code&gt;declaration-block-no-shorthand-property-overrides&lt;/code&gt; предотвратит бессмысленное переопределение свойств внутри правил:&lt;/p&gt;
&lt;img src=&quot;/2016/05/15/linting-css/no-prop-override.jpg&quot; alt=&quot;Пример кода с бессмысленным переопределением свойства&quot; title=&quot;Пример кода с бессмысленным переопределением свойства&quot;&gt;
&lt;p&gt;Правило &lt;code&gt;no-descending-specificity&lt;/code&gt; обнаружит бессмысленное переопределение правил более специфичными селекторами.&lt;/p&gt;
&lt;img src=&quot;/2016/05/15/linting-css/no-descending-specificity.jpg&quot; alt=&quot;Пример кода с бессмысленным переопределением правила&quot; title=&quot;Пример кода с бессмысленным переопределением правила&quot;&gt;
&lt;p&gt;Правило &lt;code&gt;no-indistinguishable-colors&lt;/code&gt; предупредит о похожих цветах, заданных в CSS:&lt;/p&gt;
&lt;img src=&quot;/2016/05/15/linting-css/no-indistinguishable-colors.jpg&quot; alt=&quot;Пример кода с похожими цветами&quot; title=&quot;Пример кода с похожими цветами&quot;&gt;
&lt;p&gt;На самом деле таких правил-помощников довольно много. Проще изучить их в &lt;a href=&quot;http://stylelint.io/user-guide/rules/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;документации&lt;/a&gt;, так как быстро появляются всё новые правила.&lt;/p&gt;
&lt;h3 id=&quot;«Причёсывание»&quot;&gt;&lt;a href=&quot;#«Причёсывание»&quot; class=&quot;headerlink&quot; title=&quot;«Причёсывание»&quot;&gt;&lt;/a&gt;«Причёсывание»&lt;/h3&gt;&lt;p&gt;В некоторых случаях хочется или нужно «причесать» стили автоматически.&lt;/p&gt;
&lt;p&gt;Как я говорил раньше, мы пользовались CSSComb для причесывания стилей. Но, к сожалению, бывало, он глючно работал с нестандартным синтаксисом вроде Sass, вовсе не работал с PostCSS и в целом приостановился в развитии.&lt;/p&gt;
&lt;p&gt;Так что пришлось искать ему замену. И приятной находкой оказался &lt;a href=&quot;https://github.com/morishitter/stylefmt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stylefmt&lt;/a&gt;, который работает с понимаемыми PostCSS синтаксисами и принимает правила конфигурации Stylelint.&lt;/p&gt;
&lt;p&gt;Но не всё так чудесно, как хотелось бы. Так как stylefmt — совсем свежий проект, на момент написания статьи он поддерживает далеко не все правила Stylelint:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;переносы и пробелы перед и после открывающих скобок (&lt;code&gt;block-opening-brace-newline-after&lt;/code&gt;, &lt;code&gt;block-opening-brace-newline-before&lt;/code&gt;, &lt;code&gt;block-opening-brace-space-after&lt;/code&gt;, &lt;code&gt;block-opening-brace-space-before&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;отступы (&lt;code&gt;indentation&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;пробелы до и после комбинаторов (&lt;code&gt;selector-combinator-space-after&lt;/code&gt;, &lt;code&gt;selector-combinator-space-before&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;переносы и пробелы перед и после запятых в селекторах (&lt;code&gt;selector-list-comma-newline-after&lt;/code&gt;, &lt;code&gt;selector-list-comma-newline-before&lt;/code&gt;, &lt;code&gt;selector-list-comma-space-after&lt;/code&gt;, &lt;code&gt;selector-list-comma-space-before&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Остальное по-прежнему придётся править руками. Или можно &lt;a href=&quot;https://github.com/morishitter/stylefmt/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;помочь сообществу&lt;/a&gt; и запилить недостающую функциональность.&lt;/p&gt;
&lt;h3 id=&quot;Сортировка-свойств-в-CSS-правилах&quot;&gt;&lt;a href=&quot;#Сортировка-свойств-в-CSS-правилах&quot; class=&quot;headerlink&quot; title=&quot;Сортировка свойств в CSS-правилах&quot;&gt;&lt;/a&gt;Сортировка свойств в CSS-правилах&lt;/h3&gt;&lt;p&gt;Чем ещё был хорош CSSComb, так это автоматическая сортировка свойств внутри CSS-правил.&lt;/p&gt;
&lt;p&gt;Вообще-то Stylelint умеет проверять очерёдность свойств в правилах, но линтить это нет особого смысла, так как человеку тяжело да и не нужно запоминать точный порядок всех возможных свойств.&lt;/p&gt;
&lt;p&gt;А stylefmt пока что не умеет автоматически наводить порядок в очерёдности свойств.&lt;/p&gt;
&lt;p&gt;Что делать?&lt;/p&gt;
&lt;p&gt;На помощь пришёл замечательный инструмент &lt;a href=&quot;https://github.com/hudochenkov/postcss-sorting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PostCSS Sorting&lt;/a&gt;. Он умеет сортировать свойства в правилах синтаксисов, которые понимает PostCSS. Этот инструмент вдохновлён CSSComb, и у него аналогичный конфиг. Запускать его можно тоже таск-раннером или из редактора.&lt;/p&gt;
&lt;p&gt;Логично предположить, что рано или поздно stylefmt и PostCSS Sorting станут каким-то образом связаны, и их можно будет использовать как один инструмент.&lt;/p&gt;
&lt;h3 id=&quot;Итого&quot;&gt;&lt;a href=&quot;#Итого&quot; class=&quot;headerlink&quot; title=&quot;Итого&quot;&gt;&lt;/a&gt;Итого&lt;/h3&gt;&lt;p&gt;Я составил и обновляю по мере необходимости конфигурации &lt;a href=&quot;https://github.com/htmlacademy/codeguide/blob/master/.stylelintrc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;для Stylelint&lt;/a&gt; и &lt;a href=&quot;https://github.com/htmlacademy/codeguide/blob/master/.postcss-sorting.json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;для PostCSS Sorting&lt;/a&gt;. Их можно просто использовать или переопределить.&lt;/p&gt;
&lt;p&gt;Держите свой код в порядке!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Предыстория&quot;&gt;&lt;a href=&quot;#Предыстория&quot; class=&quot;headerlink&quot; title=&quot;Предыстория&quot;&gt;&lt;/a&gt;Предыстория&lt;/h3&gt;&lt;p&gt;Однажды мы &lt;a href=&quot;https://htmlac
    
    </summary>
    
    
      <category term="workflow" scheme="http://juwain.ru/tags/workflow/"/>
    
      <category term="CSS" scheme="http://juwain.ru/tags/CSS/"/>
    
      <category term="linting" scheme="http://juwain.ru/tags/linting/"/>
    
  </entry>
  
  <entry>
    <title>Баги в браузерах. Кто виноват и что делать?</title>
    <link href="http://juwain.ru/2016/05/07/dump-talk/"/>
    <id>http://juwain.ru/2016/05/07/dump-talk/</id>
    <published>2016-05-06T22:22:45.000Z</published>
    <updated>2016-05-06T22:38:17.000Z</updated>
    
    <content type="html">&lt;p&gt;В апреле ездил в Екатеринбург на &lt;a href=&quot;http://dump-conf.ru/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ДАМП&lt;/a&gt;. Рассказывал про баги в браузерах. Вот и видео выступления с конференции подоспело.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/K4cQH85bntQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://juwain.ru/presentation/browser-bugs/&quot;&gt;Презентация&lt;/a&gt; прилагается.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;В апреле ездил в Екатеринбург на &lt;a href=&quot;http://dump-conf.ru/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ДАМП&lt;/a&gt;. Рассказывал про баги в браузерах
    
    </summary>
    
    
      <category term="CSS" scheme="http://juwain.ru/tags/CSS/"/>
    
      <category term="доклады" scheme="http://juwain.ru/tags/%D0%B4%D0%BE%D0%BA%D0%BB%D0%B0%D0%B4%D1%8B/"/>
    
  </entry>
  
  <entry>
    <title>Техника помидора</title>
    <link href="http://juwain.ru/2015/09/03/pomodoro-technique/"/>
    <id>http://juwain.ru/2015/09/03/pomodoro-technique/</id>
    <published>2015-09-03T06:00:00.000Z</published>
    <updated>2016-05-03T17:38:30.000Z</updated>
    
    <content type="html">&lt;p&gt;На прошедшей неделе я попробовал управлять своим рабочим временем нестихийным образом.&lt;/p&gt;
&lt;p&gt;Накануне в ленте упомянули про технику &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BC%D0%B8%D0%B4%D0%BE%D1%80_%28%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pomodoro&lt;/a&gt;. Я решил провести эту рабочую неделю с помидорной техникой и посмотреть, что из этого получится.&lt;/p&gt;
&lt;h3 id=&quot;Вкратце&quot;&gt;&lt;a href=&quot;#Вкратце&quot; class=&quot;headerlink&quot; title=&quot;Вкратце&quot;&gt;&lt;/a&gt;Вкратце&lt;/h3&gt;&lt;p&gt;Техника работает. Не отвлекаясь по мелочам всю неделю работал более эффективно. Сделал боьше, чем обычно, за то же время. Рекомендую!&lt;/p&gt;
&lt;h3 id=&quot;Что-ещё-за-помидоры&quot;&gt;&lt;a href=&quot;#Что-ещё-за-помидоры&quot; class=&quot;headerlink&quot; title=&quot;Что ещё за помидоры&quot;&gt;&lt;/a&gt;Что ещё за помидоры&lt;/h3&gt;&lt;p&gt;Техника несложная: рабочее время делится на небольшие спринты с короткими перерывами. Во время спринта надо выключить все уведомления и не отвлекаться на раздражители: чаты, контактик, твиттер и прочие уведомляшки.&lt;/p&gt;
&lt;p&gt;Спринты идут следующим образом:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;25 минут работы;&lt;/li&gt;
&lt;li&gt;5 минут перерыв;&lt;/li&gt;
&lt;li&gt;25 минут работы;&lt;/li&gt;
&lt;li&gt;5 минут перерыв;&lt;/li&gt;
&lt;li&gt;25 минут работы;&lt;/li&gt;
&lt;li&gt;5 минут перерыв;&lt;/li&gt;
&lt;li&gt;25 минут работы;&lt;/li&gt;
&lt;li&gt;15 минут перерыв.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Этот цикл затем повторяется по кругу. В перерывах важно отвлечься от текущего дела, а лучше вообще встать из-за компа, походить, размяться, попить водички, подумать о чём-нибудь помимо текущей задачи.&lt;/p&gt;
&lt;p&gt;Это всё теория, а …&lt;/p&gt;
&lt;h3 id=&quot;На-практике&quot;&gt;&lt;a href=&quot;#На-практике&quot; class=&quot;headerlink&quot; title=&quot;На практике&quot;&gt;&lt;/a&gt;На практике&lt;/h3&gt;&lt;p&gt;… получается следующим образом. В начале рабочего дня я начинал разбирать разные мелкие задачи и дела, не включая счётчик помидоров.  С прошлого дня накапливаются незавершённые мелочи, рандомные коммуникации, идеи, которые надо быстро разрешить и проверить. Этот предварительный этап у меня длился от 1 до 2 часов. Дальше разбирал задачи на сегодня из общего туду-листа.&lt;/p&gt;
&lt;p&gt;Затем я включал счётчик, выключал уведомления и начинал работать уже по помидорам. До большого перерыва получалось сделать от 4 до 6 помидоров.&lt;/p&gt;
&lt;p&gt;В большой перерыв я шёл на обед, который занимает около часа.&lt;/p&gt;
&lt;p&gt;После обеда получалось сделать от 7 до 12 помидоров.&lt;/p&gt;
&lt;p&gt;Итого примерно так:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1−2 часа без помидоров, рандом, подготовка;&lt;/li&gt;
&lt;li&gt;2−3 часа работы;&lt;/li&gt;
&lt;li&gt;1 час большой перерыв;&lt;/li&gt;
&lt;li&gt;3.5−6 часов работы.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Итого, в среднем за прошедшую неделю получалось от 5 до 8 часов «чистой» работы в день. И это действительно эффективная работа, когда ты полностью погружаешься и входишь в состояние потока. Плюс 1−2 часа на предварительный рандом и подготовку.&lt;/p&gt;
&lt;h3 id=&quot;Инструменты&quot;&gt;&lt;a href=&quot;#Инструменты&quot; class=&quot;headerlink&quot; title=&quot;Инструменты&quot;&gt;&lt;/a&gt;Инструменты&lt;/h3&gt;&lt;p&gt;Я использовал бесплатный &lt;a href=&quot;https://itunes.apple.com/ru/app/pomodoro-one/id907364780&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pomodoro One&lt;/a&gt; для мака. Это приложение простое и понятное, выдаёт окошко на передний план и звук, когда заканчивается или начинается следующий период. Ещё рекомендовали веб-версию &lt;a href=&quot;http://tomato-timer.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tomato Timer&lt;/a&gt; и платное приложение для мака &lt;a href=&quot;https://itunes.apple.com/us/app/tadam/id531349534&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tadam&lt;/a&gt;, но я не пробовал.&lt;/p&gt;
&lt;h3 id=&quot;Итог&quot;&gt;&lt;a href=&quot;#Итог&quot; class=&quot;headerlink&quot; title=&quot;Итог&quot;&gt;&lt;/a&gt;Итог&lt;/h3&gt;&lt;p&gt;Если у вас есть проблемы с решением больших и сложных, множества мелких или рутинных задач, попробуйте помидорную технику. С ней увеличивается продуктивность, а главное — после работы остаются силы на другие дела.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;На прошедшей неделе я попробовал управлять своим рабочим временем нестихийным образом.&lt;/p&gt;
&lt;p&gt;Накануне в ленте упомянули про технику &lt;a h
    
    </summary>
    
    
      <category term="управление временем" scheme="http://juwain.ru/tags/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%B5%D0%BC/"/>
    
  </entry>
  
  <entry>
    <title>Кнопка</title>
    <link href="http://juwain.ru/2015/07/15/design-elements-button/"/>
    <id>http://juwain.ru/2015/07/15/design-elements-button/</id>
    <published>2015-07-15T13:54:28.000Z</published>
    <updated>2016-05-03T16:18:47.000Z</updated>
    
    <content type="html">&lt;p&gt;Потихоньку реализую элементы будущего дизайна HTML Academy. Вот, к примеру, кнопка с эффектом по наведению или фокусу.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;325&quot; data-theme-id=&quot;9939&quot; data-slug-hash=&quot;MwXvYv&quot; data-default-tab=&quot;result&quot; data-user=&quot;juwain&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/juwain/pen/MwXvYv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Эффект кнопки&lt;/a&gt; by juwain (&lt;a href=&quot;http://codepen.io/juwain&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@juwain&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Потихоньку реализую элементы будущего дизайна HTML Academy. Вот, к примеру, кнопка с эффектом по наведению или фокусу.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p data
    
    </summary>
    
    
      <category term="CSS" scheme="http://juwain.ru/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Отступы фонового изображения</title>
    <link href="http://juwain.ru/2015/07/14/background-offsets/"/>
    <id>http://juwain.ru/2015/07/14/background-offsets/</id>
    <published>2015-07-14T14:00:05.000Z</published>
    <updated>2016-05-03T16:18:44.000Z</updated>
    
    <content type="html">&lt;p&gt;Простой способ добавить отступы фоновому изображению: &lt;br&gt;&lt;code&gt;background-position: center&lt;/code&gt; и &lt;code&gt;background-size: calc(100% - Npx)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;380&quot; data-theme-id=&quot;9939&quot; data-slug-hash=&quot;zGawGV&quot; data-default-tab=&quot;result&quot; data-user=&quot;juwain&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/juwain/pen/zGawGV/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zGawGV&lt;/a&gt; by juwain (&lt;a href=&quot;http://codepen.io/juwain&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@juwain&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Простой способ добавить отступы фоновому изображению: &lt;br&gt;&lt;code&gt;background-position: center&lt;/code&gt; и &lt;code&gt;background-size: calc(100% - N
    
    </summary>
    
    
      <category term="CSS" scheme="http://juwain.ru/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS-ликбез. this, call, apply, bind</title>
    <link href="http://juwain.ru/2015/07/05/js-this-call-apply-bind/"/>
    <id>http://juwain.ru/2015/07/05/js-this-call-apply-bind/</id>
    <published>2015-07-05T20:22:48.000Z</published>
    <updated>2016-05-03T17:38:34.000Z</updated>
    
    <content type="html">&lt;p&gt;А сегодня я буду вещать про &lt;code&gt;this&lt;/code&gt; и методы вызова функций.&lt;/p&gt;
&lt;h3 id=&quot;Тот-самый-this&quot;&gt;&lt;a href=&quot;#Тот-самый-this&quot; class=&quot;headerlink&quot; title=&quot;Тот самый this&quot;&gt;&lt;/a&gt;Тот самый this&lt;/h3&gt;&lt;p&gt;Чтобы вызвать функцию и передать в неё желаемый объект в качестве &lt;code&gt;this&lt;/code&gt;, можно воспользоваться методами функций &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt; или &lt;code&gt;bind&lt;/code&gt;. Рассмотрим их различия.&lt;/p&gt;
&lt;h3 id=&quot;Метод-call&quot;&gt;&lt;a href=&quot;#Метод-call&quot; class=&quot;headerlink&quot; title=&quot;Метод call&quot;&gt;&lt;/a&gt;Метод call&lt;/h3&gt;&lt;p&gt;В качестве аргументов метод &lt;code&gt;call&lt;/code&gt; функции первым принимает объект, который станет &lt;code&gt;this&lt;/code&gt; внутри функции. За ним перечисляются через запятую параметры самой функции.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; omnomnom = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;param1, param2&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Любимые &#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.category + &lt;span class=&quot;string&quot;&gt;&#39;: &#39;&lt;/span&gt; + param1 + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + param2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; favorite = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  category: &lt;span class=&quot;string&quot;&gt;&#39;фрукты&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;omnomnom.call(favorite, &lt;span class=&quot;string&quot;&gt;&#39;яблоко&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;груша&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет «Любимые фрукты: яблоко, груша»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Метод-apply&quot;&gt;&lt;a href=&quot;#Метод-apply&quot; class=&quot;headerlink&quot; title=&quot;Метод apply&quot;&gt;&lt;/a&gt;Метод apply&lt;/h3&gt;&lt;p&gt;Метод &lt;code&gt;apply&lt;/code&gt; отличается от &lt;code&gt;call&lt;/code&gt; тем, что в него можно передать любое число параметров в виде одного массива. В случае, когда параметров у функции много, нет необходимости их всех перечислять через запятую, а можно просто передать одним массивом.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; omnomnom = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;param1, param2, param3&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Любимые &#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.category + &lt;span class=&quot;string&quot;&gt;&#39;: &#39;&lt;/span&gt; + param1 + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  param2 + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + param3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; favorite = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  category: &lt;span class=&quot;string&quot;&gt;&#39;фрукты&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;omnomnom.apply(favorite, [&lt;span class=&quot;string&quot;&gt;&#39;яблоко&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;груша&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;вишня&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет «Любимые фрукты: яблоко, груша, вишня»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Массивом в функцию удобно как раз передавать неопределённое число параметров. И внутри функции в таком случае лучше не завязываться на конкретные названия параметров, а использовать объект &lt;code&gt;arguments&lt;/code&gt; для доступа ко всем параметрам сразу.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; omnomnom = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Любимые &#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.category + &lt;span class=&quot;string&quot;&gt;&#39;: &#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [].slice.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;).join(&lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; favorite = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  category: &lt;span class=&quot;string&quot;&gt;&#39;фрукты&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;omnomnom.apply(favorite, [&lt;span class=&quot;string&quot;&gt;&#39;яблоко&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;груша&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;вишня&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет «Любимые фрукты: яблоко, груша, вишня»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Метод-bind&quot;&gt;&lt;a href=&quot;#Метод-bind&quot; class=&quot;headerlink&quot; title=&quot;Метод bind&quot;&gt;&lt;/a&gt;Метод bind&lt;/h3&gt;&lt;p&gt;Метод &lt;code&gt;bind&lt;/code&gt; отличается тем, что не выполняет функцию сразу, как &lt;code&gt;call&lt;/code&gt; и &lt;code&gt;apply&lt;/code&gt;, а возвращает её. Возвращённая функция вызвается как обычно, но внутри неё уже будет заданный &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; omnomnom = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;param1, param2&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Любимые &#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.category + &lt;span class=&quot;string&quot;&gt;&#39;: &#39;&lt;/span&gt; + param1 + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + param2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; favorite = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  category: &lt;span class=&quot;string&quot;&gt;&#39;фрукты&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; func = omnomnom.bind(favorite, &lt;span class=&quot;string&quot;&gt;&#39;яблоко&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;string&quot;&gt;&#39;груша&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет «Любимые фрукты: яблоко, груша»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Заметьте, что остальные параметры могут передаваться списком через запятую как в метод &lt;code&gt;bind&lt;/code&gt;, так и при вызове возвращенной функции.&lt;/p&gt;
&lt;p&gt;Продолжение следует…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;А сегодня я буду вещать про &lt;code&gt;this&lt;/code&gt; и методы вызова функций.&lt;/p&gt;
&lt;h3 id=&quot;Тот-самый-this&quot;&gt;&lt;a href=&quot;#Тот-самый-this&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="JS" scheme="http://juwain.ru/tags/JS/"/>
    
      <category term="JS-ликбез" scheme="http://juwain.ru/tags/JS-%D0%BB%D0%B8%D0%BA%D0%B1%D0%B5%D0%B7/"/>
    
  </entry>
  
  <entry>
    <title>JS-ликбез. Циклы и обход массивов</title>
    <link href="http://juwain.ru/2015/06/21/js-loops-and-array-iterating/"/>
    <id>http://juwain.ru/2015/06/21/js-loops-and-array-iterating/</id>
    <published>2015-06-21T20:45:52.000Z</published>
    <updated>2016-05-03T17:38:40.000Z</updated>
    
    <content type="html">&lt;p&gt;В этой части ликбеза речь пойдёт о циклах и обходе массивов в JS.&lt;/p&gt;
&lt;h3 id=&quot;Переменная-длины-массива&quot;&gt;&lt;a href=&quot;#Переменная-длины-массива&quot; class=&quot;headerlink&quot; title=&quot;Переменная длины массива&quot;&gt;&lt;/a&gt;Переменная длины массива&lt;/h3&gt;&lt;p&gt;В цикле &lt;code&gt;for&lt;/code&gt;, если он используется для пробега по массиву,  лучше сохранить значение длины массива в отдельную переменную, чем брать её каждую итерацию через &lt;code&gt;array.length&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Нормально:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.length; i += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// array.length берётся каждую итерацию&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Но можно лучше:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = array.length; i &amp;lt; len; i += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// array.length в переменной len&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Цикл-for-…-in&quot;&gt;&lt;a href=&quot;#Цикл-for-…-in&quot; class=&quot;headerlink&quot; title=&quot;Цикл for … in&quot;&gt;&lt;/a&gt;Цикл for … in&lt;/h3&gt;&lt;p&gt;Цикл &lt;code&gt;for … in&lt;/code&gt; медленней, чем классический &lt;code&gt;for&lt;/code&gt;. Но иногда он бывает удобнее. Так что в случае использования &lt;code&gt;for … in&lt;/code&gt; для перебора свойств объекта, лучше фильтровать собственные свойства с помощью функции &lt;code&gt;hasOwnProperty&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj.hasOwnProperty(name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name + &lt;span class=&quot;string&quot;&gt;&#39; собственное свойство&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name + &lt;span class=&quot;string&quot;&gt;&#39; унаследованное свойство типа toString&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;forEach-и-компания&quot;&gt;&lt;a href=&quot;#forEach-и-компания&quot; class=&quot;headerlink&quot; title=&quot;forEach и компания&quot;&gt;&lt;/a&gt;forEach и компания&lt;/h3&gt;&lt;p&gt;Выполнение работы метода &lt;code&gt;forEach&lt;/code&gt; проблематично прервать. Если нужно использовать метод &lt;code&gt;forEach&lt;/code&gt;, и при этом есть необходимость прервать выполнение его работы, то лучше использовать похожие на &lt;code&gt;forEach&lt;/code&gt; методы &lt;code&gt;every&lt;/code&gt; или &lt;code&gt;some&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Метод &lt;code&gt;every&lt;/code&gt; будет продолжать работу до тех пор, пока в результате итерации возвращается &lt;code&gt;true&lt;/code&gt;. В случае возврата &lt;code&gt;false&lt;/code&gt; работа метода прерывается. Например, следующий код будет итеративно выводить первые 5 элементов массива, а затем выполнение работы метода прервётся:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.every(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;el, i&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i] &amp;gt;= &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет 1 2 3 4 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Метод &lt;code&gt;some&lt;/code&gt; обратен &lt;code&gt;every&lt;/code&gt;. То есть он будет работать, пока в итерации возвращается &lt;code&gt;false&lt;/code&gt; и прервёт работу, когда возвращется &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.some(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;el, i&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i] &amp;gt;= &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет 1 2 3 4 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Для обхода массивов также полезны методы &lt;code&gt;map&lt;/code&gt; и &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Метод &lt;code&gt;map&lt;/code&gt; обходит массив и возвращает в результате новый массив. На каждой итерации с текущим элементом можно совершить какие-либо действия:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; doubled = arr.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item, index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr, doubled);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет [1, 2, 3] [2, 4, 6]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Метод &lt;code&gt;filter&lt;/code&gt;создаёт новый массив из элементов, подходящих условию фильтрующей функции:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filtered = arr.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item, index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr, filtered);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет [1, 2, 3, 4, 5] [1, 3, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Ещё один полезный метод массива – &lt;code&gt;reduce&lt;/code&gt;. Он обходит массив и на каждой итерации возвращает аккумулированное значение прошлой итерации и текущий элемент массива. Таким образом можно, к примеру, просуммировать все элементы массива (свести массив к одному числу):&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reduced = arr.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prevValue, currentValue, index, array&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prevValue + currentValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr, reduced);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет [1, 2, 3, 4] 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Определение-массива&quot;&gt;&lt;a href=&quot;#Определение-массива&quot; class=&quot;headerlink&quot; title=&quot;Определение массива&quot;&gt;&lt;/a&gt;Определение массива&lt;/h3&gt;&lt;p&gt;Как известно, массив — это объект. То есть:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Как достоверно определить, что перед вами массив? Вот так:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет [object Array]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Продолжение следует…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;В этой части ликбеза речь пойдёт о циклах и обходе массивов в JS.&lt;/p&gt;
&lt;h3 id=&quot;Переменная-длины-массива&quot;&gt;&lt;a href=&quot;#Переменная-длины-массив
    
    </summary>
    
    
      <category term="JS" scheme="http://juwain.ru/tags/JS/"/>
    
      <category term="JS-ликбез" scheme="http://juwain.ru/tags/JS-%D0%BB%D0%B8%D0%BA%D0%B1%D0%B5%D0%B7/"/>
    
  </entry>
  
  <entry>
    <title>JS-ликбез. Объекты и примитивные типы</title>
    <link href="http://juwain.ru/2015/06/11/js-objects-and-primitive-values/"/>
    <id>http://juwain.ru/2015/06/11/js-objects-and-primitive-values/</id>
    <published>2015-06-11T20:51:04.000Z</published>
    <updated>2016-05-03T17:38:37.000Z</updated>
    
    <content type="html">&lt;p&gt;В этой серии статей я собираюсь осветить те части JavaScript, которые показались мне интересными в момент изучения. Статьи будут состоять из небольших блоков с примерами.&lt;/p&gt;
&lt;p&gt;Поехали!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Хороший туториал по JS есть на MDN&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Объекты-и-примитивные-типы&quot;&gt;&lt;a href=&quot;#Объекты-и-примитивные-типы&quot; class=&quot;headerlink&quot; title=&quot;Объекты и примитивные типы&quot;&gt;&lt;/a&gt;Объекты и примитивные типы&lt;/h3&gt;&lt;p&gt;Объекты с одинаковым содержимым не равны друг другу, а примитивные типы равны.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;text: &lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = &amp;#123;text: &lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj1 === obj2   &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;obj&#39;&lt;/span&gt; === &lt;span class=&quot;string&quot;&gt;&#39;obj&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] === [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]     &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Объекты равны друг другу, только если ссылаются на один и тот же объект.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;text: &lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = obj1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj1 === obj2   &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Анонимная-самовызывающаяся-функция&quot;&gt;&lt;a href=&quot;#Анонимная-самовызывающаяся-функция&quot; class=&quot;headerlink&quot; title=&quot;Анонимная самовызывающаяся функция&quot;&gt;&lt;/a&gt;Анонимная самовызывающаяся функция&lt;/h3&gt;&lt;p&gt;Позволяет не загаживать глобальную область видимости. Внутрь при вызове можно передать параметры.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;param&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; param;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(anonimousParam);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Синтаксис покороче — &lt;a href=&quot;http://stackoverflow.com/questions/5827290/javascript-function-leading-bang-syntax&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;leading bang !&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;!&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Вместо «!» можно использовать другие символы.&lt;/p&gt;
&lt;h3 id=&quot;Параметры-функций&quot;&gt;&lt;a href=&quot;#Параметры-функций&quot; class=&quot;headerlink&quot; title=&quot;Параметры функций&quot;&gt;&lt;/a&gt;Параметры функций&lt;/h3&gt;&lt;p&gt;В функцию можно передавать сколько угодно параметров, это не вызовет ошибку,  даже если это количество параметров не предусмотрено.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b, c&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a, b ,c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// выведет «a b c»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;);                &lt;span class=&quot;comment&quot;&gt;// выведет «a b undefined»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Примитивные типы в качестве параметров передаются в функцию по значению:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doubleVal&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;val&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  val += val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doubleVal(number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(number); &lt;span class=&quot;comment&quot;&gt;// выведет «5»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;А объектные типы — по ссылке:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doubleObjectNumber&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj.number += obj.number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;number: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doubleObjectNumber(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj); &lt;span class=&quot;comment&quot;&gt;// выведет «Object &amp;#123;number: 10&amp;#125;»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Объект &lt;code&gt;arguments&lt;/code&gt; функции похож на массив, но это всё таки объект. Он не имеет никаких свойств массива, кроме свойства &lt;code&gt;length&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.forEach, [].forEach);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;list&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;of&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;parameters&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет «4 undefined function forEach()»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Объект &lt;code&gt;arguments&lt;/code&gt; можно преобразовать в обычный массив с помощью метода &lt;code&gt;slice&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(args, args.forEach);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;list&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;of&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;parameters&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// выведет «[&quot;a&quot;, &quot;list&quot;, &quot;of&quot;, &quot;parameters&quot;] function forEach()»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Количество параметров функции можно узнать из свойства &lt;code&gt;length&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;parameter1, parameter2, parameter3&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(test.length); &lt;span class=&quot;comment&quot;&gt;// выведет «3»&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Продолжение следует…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;В этой серии статей я собираюсь осветить те части JavaScript, которые показались мне интересными в момент изучения. Статьи будут состоять
    
    </summary>
    
    
      <category term="JS" scheme="http://juwain.ru/tags/JS/"/>
    
      <category term="JS-ликбез" scheme="http://juwain.ru/tags/JS-%D0%BB%D0%B8%D0%BA%D0%B1%D0%B5%D0%B7/"/>
    
  </entry>
  
  <entry>
    <title>Скринкаст по редактору Atom</title>
    <link href="http://juwain.ru/2015/02/03/atom-screencast/"/>
    <id>http://juwain.ru/2015/02/03/atom-screencast/</id>
    <published>2015-02-02T21:02:18.000Z</published>
    <updated>2016-05-03T16:18:31.000Z</updated>
    
    <content type="html">&lt;p&gt;А вот и подоспел ознакомительный дебютный скринкаст по Atom.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/k2wyMbpvXWc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;А вот и подоспел ознакомительный дебютный скринкаст по Atom.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/k2wyMb
    
    </summary>
    
    
      <category term="atom" scheme="http://juwain.ru/tags/atom/"/>
    
      <category term="workflow" scheme="http://juwain.ru/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>Презентация по редактору Atom</title>
    <link href="http://juwain.ru/2015/01/21/atom/"/>
    <id>http://juwain.ru/2015/01/21/atom/</id>
    <published>2015-01-20T21:07:01.000Z</published>
    <updated>2016-05-06T22:35:48.000Z</updated>
    
    <content type="html">&lt;p&gt;Обзорная &lt;a href=&quot;http://juwain.ru/presentation/atom-overview/&quot;&gt;презентация&lt;/a&gt; по редактору Atom. Скоро будет ещё и скринкаст.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Обзорная &lt;a href=&quot;http://juwain.ru/presentation/atom-overview/&quot;&gt;презентация&lt;/a&gt; по редактору Atom. Скоро будет ещё и скринкаст.&lt;/p&gt;

    
    </summary>
    
    
      <category term="atom" scheme="http://juwain.ru/tags/atom/"/>
    
      <category term="workflow" scheme="http://juwain.ru/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>Пути пользователя</title>
    <link href="http://juwain.ru/2014/10/03/user-way/"/>
    <id>http://juwain.ru/2014/10/03/user-way/</id>
    <published>2014-10-02T21:47:38.000Z</published>
    <updated>2016-05-03T17:38:25.000Z</updated>
    
    <content type="html">&lt;p&gt;Человек всегда стремился к совершенству: поймать мамонта покрупнее, построить лодку прочнее, возвести просторнее дом. Это качество в нас от природы. И в стремлении достичь цель (получить выгоду, возможности или влияние) мы стараемся затратить как можно меньше собственных ресурсов.&lt;/p&gt;
&lt;p&gt;Так работает наш мозг: лень выполнять бессмысленные действия, тратить силы и время, если это не принесёт плодов. Но если цель ясна, а профит от её достижения очевиден, то человек способен найти более короткий путь, научиться что-то делать эффективнее или изменить окружение, чтобы меньше потратить ресурсов и при этом больше получить.&lt;/p&gt;
&lt;p&gt;В большинстве каждодневных решений мы руководствуемся паттернами поведения, которые мозг всю жизнь старательно накапливает. Паттерны формируются в основном из прямого опыта человека и нужны для того, чтобы в привычных ситуациях не обдумывать одинаковые решения каждый раз заново.&lt;/p&gt;
&lt;p&gt;В любой ситуации мозг в первую очередь выдаст наименее ресурсоёмкие шаблонные решения. За примером далеко ходить не надо:&lt;/p&gt;
&lt;img src=&quot;/2014/10/03/user-way/road1.jpg&quot; alt=&quot;Первая дорога&quot; title=&quot;Первая дорога&quot;&gt;
&lt;img src=&quot;/2014/10/03/user-way/road2.jpg&quot; alt=&quot;Вторая дорога&quot; title=&quot;Вторая дорога&quot;&gt;
&lt;p&gt;Самый удобный путь — простой и короткий. Если простое решение очевидно, становится лень прилагать лишние усилия.&lt;/p&gt;
&lt;p&gt;Этот принцип можно применять при проектировании любой пользовательской системы: здания, парка, веб-приложения или чего-либо ещё.&lt;/p&gt;
&lt;p&gt;Итак, пользователь появляется в новой для себя системе. У него есть определённые цели или же он исследует систему, придумывая цели на ходу. В своих решениях он руководствуется собственными паттернами поведения. И, вполне возможно, что цели человека отличаются от предположенных проектировщиком. Или же человек решает свои задачи своеобразно, не так, как планировалось.&lt;/p&gt;
&lt;p&gt;Что важно сделать на этом этапе знакомства с системой? Не ругать и не обижаться на пользователя за то, что он какой-то неправильный. И не заставлять идти пользователя одним непреложным путём, только потому, что так решил автор или заказчик системы. Наоборот — нужно не препятствовать пользователям и тщательно собрать и проанализировать их поведение внутри системы. При этом важно, чтобы пользователи чувствовали себя естественно и обладали достаточной свободой в принятии решений.&lt;/p&gt;
&lt;p&gt;Действия пользователей фиксируются двумя способами:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Пользователи сами оставляют следы, видоизменяя систему, как в случае с тропинками, фиксируются и анализируются уже последствия этих изменений. При этом прямое наблюдение за процессом может не вестись. Наиболее распространённые действия пользователей наглядно проявляются в изменениях самой системы.&lt;/li&gt;
&lt;li&gt;Наблюдается непосредственно сам процесс пользовательских действий. Все наблюдения анализируются и выявляются общие признаки, направления и цели. Этот способ больше подходит для виртуальных систем, где пользователь не всегда может непосредственно влиять на систему.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;В обоих случаях пользователей можно дополнительно опрашивать по результатам взаимодействия с системой, но наиболее важными всё равно являются сами их действия, а не впечатления, так как многие их склонны приукрашивать.&lt;/p&gt;
&lt;p&gt;Выявленные закономерности целей и направлений («протоптанные тропинки») берутся за основу при строительстве «постоянных дорог» пользователей в системе. Увидев заасфальтированную дорожку на месте привычной тропинки, пользователь будет счастлив по ней ходить. Системой с естественной навигацией, простой и понятной для большинства, будут часто и с удовольствием пользоваться.&lt;/p&gt;
&lt;p&gt;При этом даже не самый удобный путь можно сделать необычным и увлекательным, и люди будут выбирать его.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/5jw0_3-GbMg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;Это тема для следующей статьи.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Человек всегда стремился к совершенству: поймать мамонта покрупнее, построить лодку прочнее, возвести просторнее дом. Это качество в нас 
    
    </summary>
    
    
      <category term="UX" scheme="http://juwain.ru/tags/UX/"/>
    
  </entry>
  
</feed>
